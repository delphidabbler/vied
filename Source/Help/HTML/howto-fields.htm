<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/
 *
 * Copyright (C) 2011-2022, Peter Johnson (www.delphidabbler.com).
-->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text-html; charset=Windows-1252">
    <title>
      howto-fields
    </title>
    <link rel="stylesheet" href="../css/help.css" type="text/css">
  </head>
  <body>
    <h1>
      <em>How do I</em> ... Use fields &amp; macros
    </h1>
    <p>
      Proper use fields and macros of is one of the most important concepts in
      Version Information Editor since they make updating version information
      much easier. Before reading on make sure you understand <a
        href="whatis-fields.htm"
      >what fields&amp; macros are</a>.
    </p>
    <h2>
      Entering Fields &amp; Macros
    </h2>
    <p>
      String info items can contain fields and/or macros. These items are edited
      using the <a
        href="dlg-string.htm"
      >String Editor</a> which provides support for using fields and macros.
    </p>
    <p>
      The safest and easiest way to enter fields and macros in the editor is to
      place the cursor in the text where the field or macro is required then
      select the required field or macro from the <em>Insert Field</em> drop
      down list then click the <em>Insert</em> button. This inserts the field or
      macro into the text at the cursor position.
    </p>
    <p>
      You can also enter a field or macro by hand by simply typing its name in
      angle brackets. However this is risky because the name may be mispelled
      or, in the case of fields, it may not be valid for this string info item.
      The drop down list contains only those fields and macro that are valid.
    </p>
    <p>
      Macros, but not fields, can also be included in the <code>File Version
      #</code> and <code>Product Version #</code> fixed file information items.
      Like the String Editor, the Version Number Editor permits the insertion of
      macros, either manually or from a drop down list.
    </p>
    <p>
      Macros can also reference fields.
    </p>
    <h2>
      Some Examples
    </h2>
    <h3>
      Keep version numbers in sync using fields
    </h3>
    <p>
      Surprisingly the version numbers stored in the <em>File Version #</em> and
      <em>Product Version #</em> fixed file info items are not necessarily
      reflected by the content of the <em>File Version</em> and <em>Product
      Version</em> string info items. However you usually want this to be the
      case and it is all to easy to let the two get out of sync. Unsurprisingly,
      fields can fix this problem.
    </p>
    <p>
      Suppose you always want the <em>File Version</em> string to have the text
      &quot;Version W.X.Y build Z&quot; (without the quotes) where W, X, Y and Z
      are the four parts of the version number recorded in the fixed file info
      <em>File Version #</em> item. You can set the <em>File Version</em> string
      to &quot;Version &lt;#F1&gt;.&lt;#F2&gt;.&lt;#F3&gt; build
      &lt;#F4&gt;&quot;, again without the quotes.
    </p>
    <p>
      Now, everytime you change the version number in <em>File Version #</em>
      and render the result as a <a
        href="whatis-vistatement.htm"
      >VERSIONINFO statement</a> the <em>FileVersion</em> string info entry will
      have the correct version number. For example if <em>File Version #</em> is
      set to 1.2.3.4 then <em>File Version</em> will render as &quot;Version
      1.2.3 build 4&quot;.
    </p>
    <p>
      Of course any string info item could have been used here, and the same
      applies to the <em>Product Version #</em> fixed file info item with the
      use of the &lt;#P1&gt;, &lt;#P2&gt;, &lt;#P3&gt; and &lt;#P4&gt; fields.
    </p>
    <h3>
      Keep version numbers in sync using macros (version 1)
    </h3>
    <p>
      Suppose you want to always use the same major, minor and patch version
      number for file and product version number but to set the build number
      of the file version but not the product version. You can set two
      &quot;Define&quot; macros as follows: set <code>version</code> to the
      required major, minor and patch numbers, for example &quot;1.2.3&quot;
      (without the quotes) and set <code>build</code> to the build number,
      e.g. &quot;248&quot;.
    </p>
    <p>
      Now set the <code>File Version #</code> field to
      &quot;&lt;%version&gt;.&lt;%build&gt;&quot; and set <code>Product
      Version #</code> to &quot;&lt;%version&gt;.0&quot;.
    </p>
    <p>
      Now, when you want to update the version number just update the
      <code>version</code> and <code>build</code> macro values.
    </p>
    <h3>
      Keep version numbers in sync using macros (version 2)
    </h3>
    <p>
      Sometimes there may be a need to embed the version number in another file.
      Keeping that file and the version number in the version information file
      in sync can be problematic. &quot;External&quot; and &quot;Include&quot;
      macros can be used to solve this problem.
    </p>
    <h4>
      The &quot;External&quot; macro solution
    </h4>
    <p>
      Assume, as some applications do, that the version number is stored in a
      file named <code>VERSION</code>. Say that the file contains only the
      version number in the form &quot;1.2.3.4&quot; or &quot;1.2.3&quot; We can
      use an &quot;External&quot; macro (named <code>version</code>, say) to
      import the content of the <code>VERSION</code> file. Define an
      &quot;External&quot; macro and set it's value to the path to that file,
      relative to the location of the .vi file.
    </p>
    <p>
      The first non-blank line of the file is copied into the macro.
    </p>
    <p>
      Assuming you want to use the content of the <code>VERSION</code> file for
      the <code>Product Version #</code> just set that fixed file information
      item to &quot;&lt;%version&gt;&quot;.
    </p>
    <p>
      When the version number needs updating you just need to update the
      <code>VERSION</code> file.
    </p>
    <p>
      This, and the following &quot;Include&quot; macro version, are both useful
      if you have two related programs that use the same version number. This
      approach means that the version number only needs to be updated in one
      place instead of in two or more .vi files.
    </p>
    <h4>
      The &quot;Include&quot; macro solution
    </h4>
    <p>
      Maybe you want more than one value stored externally to the .vi file. You
      <em>could</em> create a different &quot;External&quot; macro and
      associated file for each such value. Alternatively you can create a single
      file with lines in the format <code>Name=Value</code> and reference that
      file from an &quot;Include&quot; macro. A separate macro is created for
      each <code>Name=Value</code> line in such a file.
    </p>
    <p>
      Returning to the example above where we used <code>version</code> and
      <code>build</code> macros, we can instead define an &quot;Include&quot;
      macro, say <code>ver</code> that references a file, say
      <code>version.ini</code>. We create this file to have the following
      contents:
    </p>
    <pre class="source-code indent">version=1.2.3
build=123</pre>
    <p>
      This file will result in two new macros being created:
      <code>&lt;%ver.version&gt;</code> and <code>&lt;%ver.build&gt;</code>.
      Note the dot separated macro name, where the part before the dot is the
      name of the &quot;Include&quot; macro and the part after the dot is the
      name of a macro defined in <code>version.ini</code>.
    </p>
    <p>
      Similar to before you can set the <code>File Version #</code> field to
      &quot;&lt;%ver.version&gt;.&lt;%ver.build&gt;&quot; and set <code>Product
      Version #</code> to &quot;&lt;%ver.version&gt;&quot;.
    </p>
    <p>
      To modify the version number just update <code>version.ini</code>.
    </p>
    <h3>
      Automatically set the Internal Name
    </h3>
    <p>
      It is customary in version information for the <em>Internal Name</em>
      string info item to be set to the name of the file minus any extension.
      This is the purpose of the &lt;SHORTFNAME&gt; field.
    </p>
    <p>
      Simply set the <em>Original File Name</em> string item to the name of the
      program file name with extension then set the <em>Internal Name</em>
      string item to &quot;&lt;SHORTFNAME&gt;&quot; (without the quotes). Now,
      assuming <em>Original File Name</em> is &quot;Foo.exe&quot;, the name
      of the <em>Internal Name</em> string, when rendered, will be
      &quot;Foo&quot;. If you later change <em>Original File Name</em> then
      <em>Internal Name</em> will update automatically.
    </p>
    <h3>
      Special Build
    </h3>
    <p>
      The &lt;SPECIALBUILD&gt; field makes it easy to include the text of any
      special build info in string info items such as <em>Product Version</em>.
      You can append any special build info to the product version string by
      setting <em>Product Version</em> to something like &quot;Release
      &lt;#P1&gt;.&lt;#P2&gt; &lt;SPECIALBUILD&gt;&quot; (without the quotes).
    </p>
    <p>
      Now, if <em>Special Build</em> is set to &quot;DEBUG&quot; and <em>Product
      Version #</em> is 1.2.3.5, <em>Product Version</em> will render as
      &quot;Release 1.2 DEBUG&quot;. If <em>Special Build</em> is not set then
      <em>Product Version</em> renders as &quot;Release 1.2 &quot; (note the
      trailing space).
    </p>
    <h3>
      Product Name
    </h3>
    <p>
      Some people repeat the product name in the <em>Product Version</em> string
      item. The &lt;PRODUCTNAME&gt; field helps with this. Simply set
      <em>Product Version</em> to something like &quot;&lt;PRODUCTNAME&gt;
      v&lt;#P1&gt;.&lt;#P2&gt;&quot;, without the quotes and, assuming
      <em>Product Name</em> is set to &quot;My Product&quot; and <em>Product
      Version #</em> is 1.2.3.4, <em>Product Version</em> will render as
      &quot;My Product v1.2&quot;.
    </p>
    <h3>
      Updating the year
    </h3>
    <p>
      The &lt;YEAR&gt; field is useful in copyright statements. If you want to
      update the year in a copyright statement automatically then just use this
      macro in the <em>Legal Copyright</em> string like this: &quot;Copyright
      &lt;YEAR&gt; My Company&quot;. This will insert the current year into the
      string when the resource statement is rendered. For example if rendered in
      2022 the string will be &quot;Copyright 2022 My Company&quot;, and the
      following year it will change to &quot;Copyright 2023 My Company&quot;.
    </p>
    <h2>
      Checking Results
    </h2>
    <p>
      You can easily check the result of using fields and macros by previewing
      the resource source code that will be generated. Use the
      <span class="menuref">File | View RC Statements</span> menu option to do
      this.
    </p>
  </body>
</html>
