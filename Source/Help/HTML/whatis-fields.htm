<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<!--
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/
 *
 * Copyright (C) 2011-2022, Peter Johnson (www.delphidabbler.com).
-->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text-html; charset=Windows-1252">
    <title>
      whatis-fields
    </title>
    <link rel="stylesheet" href="../css/help.css" type="text/css">
  </head>
  <body>
    <h1>
      <em>What are</em> ... Fields &amp; Macros
    </h1>
    <p>
      Fields and macros are probably the most useful component of the Version
      Information Editor and can be used to make updating of version information
      files much easier and less error prone.
    </p>
    <p>
      This topic describes what fields and macros are and what is available. To
      learn how to use them see <a href="howto-fields.htm">How do I use Fields
      &amp; Macros</a>.
    </p>
    <p>
      Fields and macros are kinds of named variable which can be embedded
      anywhere in the text of a <em>String Information</em> item in a version
      information document. Macros can also be used in the <em>File Version
      #</em> and <em>Product Version #</em> <em>Fixed File Information</em>
      items.
    </p>
    <p>
      When the document is exported as a <a
        href="whatis-resfile.htm"
      >resource file</a> any fields and macros are replaced by the values they
      represent.
    </p>
    <p>
      Field and macro names are enclosed in angle brackets when embedded in text
      - e.g. <code>&lt;FIELDNAME&gt;</code> and <code>&lt;%MACRONAME&gt;</code>.
      From this it can be seen that the <code>%</code> symbol is use to
      differentiate macros from fields. Because the opening angle bracket is
      used to indicate the start of a field or macro, it can't be used directly
      in text. Instead the special field <code>&lt;&lt;&gt;</code> must be used.
    </p>
    <p>
      Not all fields are valid for use with each string info item. This
      restriction does not apply to macros.
    </p>
    <p>
      While fields and macros are similar, they are not the same. The main
      difference is that there are a fixed number of fields, each of which has
      a pre-determined purpose, while macros have user defined values.
    </p>
    <h2 id="fields">
      Fields
    </h2>
    <p>
      Here is a list of supported fields, the values they represent, and the
      restrictions on their use.
    </p>
    <table>
      <thead>
        <tr>
          <th>
            Field
          </th>
          <th>
            Description
          </th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td class="shaded">
            &lt;#F1&gt;
          </td>
          <td>
            The 1st and most significant number of the <em>File Version #</em>
            item in the fixed file info section.
          </td>
        </tr>
        <tr>
          <td class="shaded">
            &lt;#F2&gt;
          </td>
          <td>
            The 2nd most significant number of the <em>File Version #</em> item.
          </td>
        </tr>
        <tr>
          <td class="shaded">
            &lt;#F3&gt;
          </td>
          <td>
            The 3rd most significant number of the <em>File Version #</em> item.
          </td>
        </tr>
        <tr>
          <td class="shaded">
            &lt;#F4&gt;
          </td>
          <td>
            The 4th and least significant number of the <em>File Version #</em>
            item.
          </td>
        </tr>
        <tr>
          <td class="shaded">
            &lt;#P1&gt;
          </td>
          <td>
            The 1st and most significant number of the <em>Product Version #</em>
            item in the fixed file info section.
          </td>
        </tr>
        <tr>
          <td class="shaded">
            &lt;#P2&gt;
          </td>
          <td>
            The 2nd most significant number of the <em>Product Version #</em>
            item.
          </td>
        </tr>
        <tr>
          <td class="shaded">
            &lt;#P3&gt;
          </td>
          <td>
            The 3rd most significant number of the <em>Product Version #</em>
            item.
          </td>
        </tr>
        <tr>
          <td class="shaded">
            &lt;#P4&gt;
          </td>
          <td>
            The 4th and least significant number of the <em>Product Version #</em>
            item.
          </td>
        </tr>
        <tr>
          <td class="shaded">
            &lt;YEAR&gt;
          </td>
          <td>
            The current 4 digit year according to the system clock.
          </td>
        </tr>
        <tr>
          <td class="shaded">
            &lt;SHORTFNAME&gt;
          </td>
          <td>
            The value of the <em>Original File Name</em> string info item without
            any extension (e.g. if <em>Original File Name</em> is
            &quot;MYPROG.EXE&quot; then &lt;SHORTNAME&gt; is set to
            &quot;MYPROG&quot;). <strong>Note:</strong> This field is not valid
            for use in the <em>Original File Name</em> item.
          </td>
        </tr>
        <tr>
          <td class="shaded">
            &lt;PRODUCTNAME&gt;
          </td>
          <td>
            The value of the <em>Product Name</em> string info item.
            <strong>Note:</strong> This field is not valid for use in the
            <em>Product Name</em> item.
          </td>
        </tr>
        <tr>
          <td class="shaded">
            &lt;SPECIALBUILD&gt;
          </td>
          <td>
            The value of the <em>Special Build</em> string info item.
            <strong>Note:</strong> This field is not valid for use in the
            <em>Special Build</em> item.
          </td>
        </tr>
        <tr>
          <td class="shaded">
            &lt;&lt;&gt;
          </td>
          <td>
            Inserts the &quot;&lt;&quot; character.
          </td>
        </tr>
      </tbody>
    </table>
    <h2 id="macros">
      Macros
    </h2>
    <p>
      Whereas fields have predefined names and values, macros allow you to effectively create your own custom &quot;fields&quot; and assign values to them.
    </p>
    <p>
      Macros are created and edited in the <a href="dlg-macros.htm">Macros</a> dialogue box. Information about macros is stored with your version information data in a <code>.vi</code> file.
    </p>
    <p>
      Macro names are restricted to alphabetic and numeric characters. Examples of valid names are <code>myMacro</code>, <code>Macro1</code>, <code>M</code>, <code>1MyMacro</code> and <code>42</code>. Examples of invalid macros are <code>my-macro</code>, <code>$myMacro</code>, <code>my macro</code> and <code>#</code>.
    </p>
    <p>
      There are three types of macro: <em>Define</em>,
      <em>External</em> and <em>Include</em>. Each is explained below.
    </p>
    <h3>
      Define
    </h3>
    <p>
      This is the most simple type of macro definition. It simply maps a macro name to a value. So, if <em>Define</em> macro <code>myDef</code> is defined as &quot;Foo&quot; then every occurence of <code>&lt;%myDef&gt;</code >is replaced by &quot;Foo&quot; when the version information resource is generated.
    </p>
    <p>
      The purpose of this type of macro is to enable a single value that is used in multiple places to be defined in one place.
    </p>
    <h3>
      External
    </h3>
    <p>
      This type of macro definition references a file that whose contents contain the macro value, with certain restrictions, explained below. So if <em>External</em> macro <code>myExt</code> references file &quot;<code>.\value.dat</code>&quot; then whenever <code>&lt;%mExt&gt;</code> occurs it is replaced by the contents of &quot;<code>.\value.dat</code>&quot;.
    </p>
    <p>
      The restrictions mentioned above are:
    </p>
    <ol>
      <li>
        The file must exist. Relative file names are taken as being relative to the directory containing the <code>.vi</code> file. Absolute file names are permitted but not recommended.
      </li>
      <li>
        The value of the macro is set to the first non-blank line of the file. If there is no such line that the macro's value is an empty string.
      </li>
      <li>
        As a consequence of 1, you can't use (or view the value of) <em>External</em> macros that reference relative file paths until the the <code>.vi</code> file has been saved.
      </li>
    </ol>
    <p>
      These macros are useful if there is a need to share the value recorded in the file in different parts of the source code.
    </p>
    <h3>
      Include
    </h3>
    <p>
      Like <em>External</em> macros, <em>Include</em> macros definitions reference data in a given file. Where <em>Include</em> macro definitions differ is that they include one or more additional macros that are defined in the file. Instead the referenced file names both the macro names and their values.
    </p>
    <p>
      To avoid names clashes between macros with the same name being defined in two or more <em>Include</em> files, the macros are referenced by the name assigned to the <em>Include</em> macro, followed by a dot and then the name of a macro from the included file.
    </p>
    <p>
      For example, assume that if macro <code>alice</code> is defined as &quot;<code>.\alice.dat</code>&quot; and macro <code>bob</code> is defined as &quot;<code>.\bob.dat</code>&quot;. If <code>alice.dat</code> contains
    </p>
    <pre class="indent source-code"># Alice's Q & A

question=42
answer=56</pre>
    <p>
      and <code>bob.dat</code> contains
    </p>
    <pre class="indent source-code"># Bob's Q & A

question=Surname?
answer=Bloggs</pre>
          <p>
      Then we will have four new macros: <code>&lt;%alice.question&gt;</code>, <code>&lt;%alice.answer&gt;</code>, <code>&lt;%bob.question&gt;</code> and <code>&lt;%bob.answer&gt;</code>. When used, the macros are replaced with <code>42</code>, <code>56</code>, &quot;<code>Surname?</code>&quot; and &quot;<code>Bloggs</code>&quot; respectively. Notice that no macros named <code>&lt;%alice</code>&gt;</code> or <code>&lt;%bob&gt;</code>are defined.
    </p>
    <p>
      Restrictions are:
    </p>
    <ol>
      <li>
        As is implied by the example file content shown above then lines beginning with the <code>#</code> character are ignored and can be used as comments. Blank lines are also ignored.
      </li>
      <li>
        As with <em>External</em> macros you can't use (or view the value of) macros defined by <em>Include</em> macros that reference relative file paths until the <code>.vi</code> file has been saved.
      </li>
    </ol>
    <p>
      This type of macro is useful whenever definitions in the form <code>name=value</code> are useful in more than one source code file.
    </p>
    <p>
      The same naming conventions used for macro names apply to those defined in include files, i.e. valid characters and letters or digits.
    </p>
  </body>
</html>
